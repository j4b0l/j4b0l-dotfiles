# Handy replacement for watch command. Before you ask - yes, I've found some
# machines where watch is not present.
function j4-watch() {
    USAGE="${FUNCNAME} command [param [param [...]]]"
    if [ -z "$1" ]; then
        echo -e "$USAGE"
        return 1
    fi
    while sleep 2; do
        date
        $@
    done
}

# Handy replacement for all the environments where you have no netcat
# or telnet available, uses only most basic commands.
function j4-netcat() {
    USAGE="${FUNCNAME} host port \nhost - address, IP or domain\nport - port number"
    if [ -z "$1" -o -z "$2" ]; then
        echo -e "$USAGE"
        return 1
    fi
    host=$1
    shift
    port=$1
    shift
    cat < /dev/null > /dev/tcp/${host}/${port}
    if [ $? == 0 ]; then
        echo "Connection to $host $port successful"
    fi
}

# replacement for netstat, just goes through /proc filesystem, grabbing IDs
# of filei descriptors of listening sockets and comparing them with net/tcp[6]
# entries (going through full net/tcp gives ports system-wide)
function j4-netstat() {
    echo "proto pid port command"
    if [ -n "$1" ] ; then
        pidlist=$1
    else
        pidlist=$(ls /proc/|grep '^[0-9]\+$')
    fi
    for procid in $pidlist; do
        comm=$(cat /proc/$procid/comm)
        ls -1 /proc/${procid}/fd/|while read fdid; do
            socketfd=$(readlink /proc/${procid}/fd/${fdid}|grep '^socket'|sed 's/[^0-9]//g')
            if [ -n "$socketfd" ]; then
                cat /proc/${procid}/net/tcp|grep $socketfd|grep -o '[0-9a-fA-F]\{8\}:[0-9a-fA-F]\{4\}\s[0-9a-fA-F]\{8\}:[0-9a-fA-F]\{4\}\s0A'|cut -b10-13|while read hexport; do echo "tcp   $procid   $((0x$hexport)) $comm"; done
                cat /proc/${procid}/net/tcp6|grep $socketfd|grep -o '[0-9a-fA-F]\{32\}:[0-9a-fA-F]\{4\}\s[0-9a-fA-F]\{32\}:[0-9a-fA-F]\{4\}\s0A'|cut -b34-37|while read hexport; do echo "tcp6  $procid   $((0x$hexport)) $comm"; done
            fi
        done
    done
}

# simple replacement for curl using bash builtin device /dev/tcp/*/*
function j4-curl() {

    FULLURL=$1
    if [ ${FULLURL:0:4} = http ]; then
        PROTO=$(echo $FULLURL|cut -d\/ -f1)//
        HTTP_HOST=$(echo $FULLURL|cut -d\/ -f3)
        HTTP_PATH=/$(echo $FULLURL|cut -d\/ -f4-)
        HOST=$(echo ${HTTP_HOST}:|cut -d: -f1)
        PORT=$(echo ${HTTP_HOST}:|cut -d: -f2)
        if [ -z "$PORT" ]; then
            if [ ${PROTO:0:5} = https ]; then
                PORT=443
            else
                PORT=80
            fi
        fi
    else
        PROTO=http://
        HTTP_HOST=$(echo $FULLURL|cut -d\/ -f1)
        HTTP_PATH=/$(echo $FULLURL|cut -d\/ -f2-)
        HOST=$(echo ${HTTP_HOST}:|cut -d: -f1)
        PORT=$(echo ${HTTP_HOST}:|cut -d: -f2)
        if [ -z "$PORT" ]; then
            PORT=80
        fi
    fi

    exec 40<>/dev/tcp/$HOST/$PORT
    if [ -e /dev/fd/40 ]; then
        echo -e "GET $HTTP_PATH HTTP/1.1\nHost: $HTTP_HOST\nUser-Agent: j4b0l-curl/0.0.1\nAccept: */*\nConnection: close\n\n">&40
        cat <&40
        exec 40>&-
        return 0
    else
        echo "Cannot open filedescriptor # 40" >&2
        return 1
    fi
}


# vim: set filetype=sh:
